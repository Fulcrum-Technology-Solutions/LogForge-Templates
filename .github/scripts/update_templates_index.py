#!/usr/bin/env python3
import os
import json
import yaml
from datetime import datetime

# Configuration
REPO_ROOT = os.getcwd()
OUTPUT_FILE = os.path.join(REPO_ROOT, "TEMPLATES.yaml")

def main():
    print("Updating templates index...")
    
    # Find all collection.json files
    packages = {}
    
    for root, dirs, files in os.walk(REPO_ROOT):
        if "collection.json" in files:
            # Skip if this is not a product directory
            if not os.path.exists(os.path.join(root, "product.meta.yaml")):
                continue
                
            # Load the collection.json
            with open(os.path.join(root, "collection.json")) as f:
                collection_data = json.load(f)
            
            # Get vendor and product information
            vendor_dir = os.path.dirname(root)
            vendor_meta_path = os.path.join(vendor_dir, "vendor.meta.yaml")
            product_meta_path = os.path.join(root, "product.meta.yaml")
            
            # Default values in case metadata files don't exist
            vendor_name = os.path.basename(vendor_dir)
            product_name = os.path.basename(root)
            
            # Try to load vendor metadata
            if os.path.exists(vendor_meta_path):
                with open(vendor_meta_path) as f:
                    vendor_meta = yaml.safe_load(f)
                    vendor_name = vendor_meta.get("name", vendor_name)
            
            # Try to load product metadata
            if os.path.exists(product_meta_path):
                with open(product_meta_path) as f:
                    product_meta = yaml.safe_load(f)
                    product_name = product_meta.get("name", product_name)
            
            # Build the package entry for TEMPLATES.yaml
            pkg_name = collection_data["name"]
            packages[pkg_name] = {
                "name": f"{vendor_name} {product_name}",
                "vendor": vendor_name,
                "product": product_name,
                "description": collection_data.get("description", ""),
                "version": collection_data.get("version", "1.0.0"),
                "templates": collection_data.get("templates", []),
                "tags": collection_data.get("tags", [])
            }
    
    # Build the final TEMPLATES.yaml structure
    templates_data = {
        "updated": datetime.utcnow().strftime("%Y-%m-%dT%H:%M:%SZ"),
        "packages": packages
    }
    
    # Write to TEMPLATES.yaml
    with open(OUTPUT_FILE, "w") as f:
        f.write("# Auto-generated by GitHub Actions - DO NOT EDIT MANUALLY\n")
        yaml.dump(templates_data, f, default_flow_style=False, sort_keys=False)
    
    print(f"Updated {OUTPUT_FILE} with {len(packages)} packages")

if __name__ == "__main__":
    main() 